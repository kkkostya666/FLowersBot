import random
import re
import string
from datetime import datetime
from aiogram.fsm.context import FSMContext

from aiogram import types, F, Bot
from aiogram import Router
from aiogram.types import FSInputFile

from keyboards.admin_keyboard.order_keyboard import order_keyboard_admin, order_keyboard_admin_1, order_keyboard_user
from keyboards.main.main_keyboards import menu_keyboard, order_keyboard
from state.SupportState import TextModel


class CatalogHandler:
    def __init__(self, db, bot_token, chat_id):
        self.router = Router()
        self.db = db
        self.register_handlers()
        self.bot = Bot(token=bot_token)
        self.chat_id = chat_id

    def register_handlers(self):
        self.router.callback_query(F.data.in_(['all_questionnaire', 'premium', 'massazh', 'individ', 'student']))(
            self.handle_questionnaire)
        self.router.callback_query(F.data.startswith('model_'))(self.handle_model_selection)
        self.router.callback_query(F.data.startswith('order_model_'))(self.create_order)
        self.router.callback_query(F.data.startswith('order_'))(self.process_order_selection)
        self.router.callback_query(F.data.startswith('confirm_'))(self.process_location_selection)
        self.router.callback_query(F.data.startswith('oplata_'))(self.process_oplata_selection)
        self.router.callback_query(F.data == 'add_number_phone_users')(self.add_number_phone_users)
        self.router.callback_query(F.data == 'back')(self.back)
        self.router.callback_query(F.data == 'paid')(self.paid)
        self.router.callback_query(F.data == 'cancel_order_user')(self.cancel_order)
        self.router.message(TextModel.number_phone)(self.send_number_phone_users)

    async def handle_questionnaire(self, callback: types.CallbackQuery):
        category_map = {
            'all_questionnaire': 2,
            'premium': 5,
            'massazh': 4,
            'individ': 3,
        }

        user_city = self.db.get_user_by_id(callback.from_user.id)
        print(user_city[8])
        print(category_map[callback.data])
        data = self.db.get_models_with_cities(category_map[callback.data], user_city[8])

        buttons = [
            [types.InlineKeyboardButton(text=f"{model[1]}", callback_data=f'model_{model[0]}')]
            for model in data
        ]

        if data:
            text = (f"<i>üíØ –í –Ω–∞—à–µ–º –±–æ—Ç–µ –º—ã –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∏ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞</i>\n"
                    f"<i>–í—Å–µ –±—É–∫–µ—Ç—ã –º—ã —Å–æ–±–∏—Ä–∞–µ–º –ª–∏—á–Ω–æ ‚ù§Ô∏è</i>")
            await callback.message.answer(
                text=text,
                reply_markup=types.InlineKeyboardMarkup(inline_keyboard=buttons),
                parse_mode="HTML")
        else:
            await callback.message.answer("–ù–µ—Ç –±—É–∫–µ—Ç–æ–≤ –≤ –¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.")

    async def back(self, callback: types.CallbackQuery):
        await callback.message.delete()
        await callback.message.answer(
            text="üìç –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n<i>–Ω–∏–∂–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–∞—à–∏—Ö –∫—Ä–∞—Å–∏–≤—ã—Ö –±—É–∫–µ—Ç–æ–≤ ‚ù§Ô∏è</i>",
            reply_markup=await menu_keyboard(),
            parse_mode="HTML",
        )

    async def handle_model_selection(self, callback: types.CallbackQuery):
        model_info = self.db.get_model_by_id(callback.data.split('_')[1])
        print(model_info)

        if model_info:
            response_text = (
                f"üë©‚Äçü¶∞ <b>üå∫ –ù–∞–∑–≤–∞–Ω–∏–µ –±—É–∫–µ—Ç–∞: {model_info[1]}</b>\n\n"
                f"<i>üíì –û–ø–∏—Å–∞–Ω–∏–µ –±—É–∫–µ—Ç–∞: {model_info[2]}</i>\n\n"
                f"________\n"
                f"<b>üí∏ –¶–µ–Ω–∞: {model_info[3]}</b>\n\n"
                f"________\n\n"
                f"<b>‚ùóÔ∏èÔ∏è–í–∞–∂–Ω–æ\n\n</b>"
                f"<b>–ë—É–∫–µ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –≥–æ—Ä–æ–¥–µ {model_info[6]}</b>"
            )

            await callback.message.answer_photo(FSInputFile(model_info[4]),
                                                caption=response_text, parse_mode="HTML",
                                                reply_markup=await order_keyboard(model_info))
        else:
            await callback.message.answer("–ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

    async def create_order(self, callback: types.CallbackQuery):
        model_info = self.db.get_model_by_id(callback.data.split('_')[2])
        print(model_info)

        if model_info:
            buttons = [
                [types.InlineKeyboardButton(text=f"–°–∞–º–æ–≤—ã–≤–æ–∑",
                                            callback_data=f"order_2h_{model_info[0]}")],
                [types.InlineKeyboardButton(text=f"–ó–∞–±–µ—Ä—É –∏–∑ –º–∞–≥–∞–∑–∏–Ω–∞",
                                            callback_data=f"order_3h_{model_info[0]}")],
            ]

            response_text = (f"<i>–û—Ç–ª–∏—á–Ω—ã–π! </i>\n\n"
                             f"<b>–ë—É–∫–µ—Ç: {model_info[1]}</b>\n"
                             f"<i>–£—Ç–æ—á–Ω–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –∫–∞–∫ –≤—ã –∑–∞–±–µ—Ä–µ—Ç–µ –±—É–∫–µ—Ç</i>")

            await callback.message.answer(response_text,
                                          reply_markup=types.InlineKeyboardMarkup(inline_keyboard=buttons),
                                          parse_mode="HTML")
            await callback.message.delete()

        else:
            await callback.message.answer("–ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

    async def process_order_selection(self, callback: types.CallbackQuery):
        data = callback.data.split('_')
        time_period = data[1]
        model_id = data[2]
        print(data, time_period, model_id)

        model_info = self.db.get_model_by_id(model_id)

        if model_info:
            response_text = f"<i>–£–∫–∞–∂–∏—Ç–µ —É–¥–æ–±–Ω—ã–π –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã</i>\n"

            confirm_buttons = [
                [types.InlineKeyboardButton(text="–°–ü–ë",
                                            callback_data=f"oplata_sbp_{model_id}_{time_period}")],
                [types.InlineKeyboardButton(text="–ü–æ –Ω–æ–º–µ—Ä—É –∫–∞—Ä—Ç—ã",
                                            callback_data=f"oplata_card_{model_id}_{time_period}")],
                [types.InlineKeyboardButton(text="USDT",
                                            callback_data=f"oplata_usdt_{model_id}_{time_period}")],
                [types.InlineKeyboardButton(text="BTC",
                                            callback_data=f"oplata_btc_{model_id}_{time_period}")]
            ]

            await callback.message.edit_text(response_text,
                                             reply_markup=types.InlineKeyboardMarkup(inline_keyboard=confirm_buttons),
                                             parse_mode="HTML")
        else:
            await callback.message.answer("–ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

    async def process_location_selection(self, callback: types.CallbackQuery):
        data = callback.data.split('_')
        print(data)
        location = data[1]
        model_id = data[2]
        time_period = data[3]

        model_info = self.db.get_model_by_id(model_id)

        if model_info:
            selected_time = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –≤—Ä–µ–º—è"
            price = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ü–µ–Ω–∞"
            selected_location = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è"
            if time_period == '1h':
                selected_time = "1 —á–∞—Å"
                price = model_info[13]
            elif time_period == '2h':
                selected_time = "C–∞–º–æ–≤—ã–≤–æ–∑"
                price = model_info[3]
            elif time_period == '3h':
                selected_time = "–ó–∞–±–µ—Ä—É –∏–∑ –º–∞–≥–∞–∑–∏–Ω–∞"
                price = model_info[3]

            if location == 'home':
                selected_location = "–≤—ã–µ–∑–¥ –Ω–∞ –¥–æ–º"
            elif location == 'host':
                selected_location = "–≤—Å—Ç—Ä–µ—á–∞ –≤ –≥–æ—Å—Ç–∏–Ω–∏—Ü–µ"

            current_time = datetime.now().strftime("%Y-%m-%d %H:%M")

            response_text = (f"<b>üßæ –í–∞—à –∑–∞–∫–∞–∑</b>\n\n"
                             f"________\n"
                             f"<i>–ú–æ–¥–µ–ª—å</i>: <code>{model_info[1]}</code>\n"
                             f"<i>–í—Ä–µ–º—è:</i> <code>{selected_time}</code>\n"
                             f"<i>–õ–æ–∫–∞—Ü–∏—è:</i> <code>{selected_location}</code>\n"
                             f"<i>–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞:</i> <code>{current_time}</code>\n"
                             f"________\n"
                             f"–¶–µ–Ω–∞: <b>{price} —Ä—É–±</b>\n\n"
                             f"<i>–î–ª—è –ø–æ–¥–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–Ω–µ—Å—Ç–∏ –ø—Ä–µ–¥–æ–ø–ª–∞—Ç—É –≤ —Ä–∞–∑–º–µ—Ä–µ 50%</i>\n"
                             f"<b>–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—ã–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã</b>")

            confirm_buttons = [
                [types.InlineKeyboardButton(text="–°–ü–ë",
                                            callback_data=f"oplata_sbp_{model_id}_{time_period}_{location}")],
                [types.InlineKeyboardButton(text="–ü–æ –Ω–æ–º–µ—Ä—É –∫–∞—Ä—Ç—ã",
                                            callback_data=f"oplata_card_{model_id}_{time_period}_{location}")],
                [types.InlineKeyboardButton(text="USDT",
                                            callback_data=f"oplata_usdt_{model_id}_{time_period}_{location}")],
                [types.InlineKeyboardButton(text="BTC",
                                            callback_data=f"oplata_btc_{model_id}_{time_period}_{location}")]
            ]

            await callback.message.edit_text(response_text,
                                             reply_markup=types.InlineKeyboardMarkup(inline_keyboard=confirm_buttons),
                                             parse_mode="HTML")
        else:
            await callback.message.answer("–ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

    @staticmethod
    def generate_order_number(length=5):
        letters_and_digits = string.ascii_uppercase + string.digits
        order_number = ''.join(random.choice(letters_and_digits) for _ in range(length))
        return order_number

    async def process_oplata_selection(self, callback: types.CallbackQuery):
        try:
            data = callback.data.split('_')
            print(f"–∏—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å {data}")
            if len(data) < 3:
                raise ValueError("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, —Å–¥–µ–ª–∞–π—Ç–µ –∑–∞–∫–∞–∑ –∑–∞–Ω–æ–≤–æ")

            method = data[1]
            model_id = data[2]
            time_period = data[3]
            model_info = self.db.get_model_by_id(model_id)
            if model_info is None:
                raise ValueError("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            price = 0
            selected_time = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –≤—Ä–µ–º—è"
            if model_info:
                price = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ü–µ–Ω–∞"
                if time_period == '1h':
                    selected_time = "1 —á–∞—Å"
                    price = model_info[3]
                elif time_period == '2h':
                    selected_time = "–°–∞–º–æ–≤—ã–≤–æ–∑"
                    price = model_info[3]
                elif time_period == '3h':
                    selected_time = "–ó–∞–±–µ—Ä—É –∏–∑ –º–∞–≥–∞–∑–∏–Ω–∞"
                    price = model_info[3]

            if method == "card":
                method = "üá∑üá∫ RUB"
            elif method == "sbp":
                method = "üì± SBP"
            elif method == "btc":
                method = "üí∂ BTC"
            elif method == "usdt":
                method = "üí≤ USDT"
            else:
                raise ValueError(f"–ù–µ–≤–µ—Ä–Ω—ã–π –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã: {method}")

            requisite = self.db.get_requisites_by_id(method)
            if not requisite:
                raise ValueError(f"–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –º–µ—Ç–æ–¥–∞ –æ–ø–ª–∞—Ç—ã '{method}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            order_number = self.generate_order_number()
            await callback.message.edit_text(f"<b>üßæ –ó–ê–ö–ê–ó #{order_number}</b>\n\n"
                                             f"<b>üíµ –°–ß–ï–¢</b>\n\n"
                                             f"-------\n"
                                             f"<i>–ú–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã:</i> <code>{method}</code>\n"
                                             f"<i>–†–µ–∫–≤–∏–∑–∏—Ç—ã:</i> <code>{requisite[0][0]}</code>\n"
                                             f"<i>–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ:</i> <code>{price}</code>\n"
                                             f"-------\n\n"
                                             f"<b>üéñ –î–ï–¢–ê–õ–ò –ó–ê–ö–ê–ó–ê</b>\n\n"
                                             f"-------\n"
                                             f"<i>–ù–∞–∑–≤–∞–Ω–∏–µ –±—É–∫–µ—Ç–∞:</i> <code>{model_info[1]}</code>\n"
                                             f"<i>–£—Å–ª–æ–≤–∏—è –∑–∞–∫–∞–∑–∞:</i> <code>{selected_time}</code>\n"
                                             f"-------\n\n"
                                             f"<i>üïì –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞:</i> <code>–û–∂–∏–¥–∞–Ω–∏–µ –æ–ø–ª–∞—Ç—ã</code>\n\n"
                                             f"<b>–ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ –∏ –ø–æ–¥–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ —Å—Ä–µ–¥–Ω–µ–º 10 –º–∏–Ω—É—Ç</b>",
                                             parse_mode="HTML",
                                             reply_markup=await order_keyboard_user())

            user_id = self.db.get_user_by_id(callback.from_user.id)
            current_date = datetime.now()
            formatted_date = current_date.strftime('%Y-%m-%d %H:%M:%S')
            if user_id is None or len(user_id) == 0:
                raise ValueError("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            self.db.insert_order_model_user(
                payment_id=order_number,
                user_id=user_id[0],
                model_id=model_id,
                price=price,
                status='–û–∂–∏–¥–∞–Ω–∏–µ –æ–ø–ª–∞—Ç—ã',
                date=formatted_date,
                method=method
            )
            text = (f"<b>üßæ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑</b>\n\n"
                    f"____\n"
                    f"–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ - #{order_number}\n"
                    f"ID - <code>{callback.from_user.id}</code>\n"
                    f"username - <code>@{callback.from_user.username}</code>\n"
                    f"–ò–º—è - <code>{callback.from_user.first_name}</code>\n"
                    f"–§–∞–º–∏–ª–∏—è - <code>{callback.from_user.last_name}</code>\n"
                    f"–°—É–º–º–∞ –∑–∞–∫–∞–∑–∞ - <code>{price}</code>\n"
                    f"–í—ã–±—Ä–∞–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã - <code>{method}</code>\n"
                    f"–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏ - <code>{formatted_date}</code>\n"
                    f"____")

            await self.bot.send_message(
                chat_id=self.chat_id,
                text=text,
                parse_mode="HTML",
                reply_markup=await order_keyboard_admin()
            )

        except ValueError as ve:
            await callback.message.answer(f"–û—à–∏–±–∫–∞: {str(ve)}")
            print(f"–û—à–∏–±–∫–∞: {ve}")

        except Exception as e:
            await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –≤—ã–±–æ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

    @staticmethod
    async def add_number_phone_users(callback: types.CallbackQuery, state: FSMContext):
        await callback.message.edit_text("<i>–í–≤–µ–¥–∏—Ç–µ –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞</i>", parse_mode="HTML")
        match = re.search(r'#(\w+)', callback.message.text)
        if match:
            order_number = match.group(0)
            await state.update_data(order_number=order_number)
            print(f"–ù–∞–π–¥–µ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: {order_number}")
        else:
            print("–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await state.set_state(TextModel.number_phone)

    async def send_number_phone_users(self, message: types.Message, state: FSMContext):
        user_input = message.text
        if self.validate_phone_number(user_input):
            await message.delete()
            await message.answer("<i>üü¢ –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞—à–∏–º –æ–ø–µ—Ä–∞—Ç–∞–º</i>\n\n"
                                 "<b>üïô –û–∂–∏–¥–∞–π—Ç–µ –∑–≤–æ–Ω–∫–∞ –Ω–∞—à–µ–π –º–æ–¥–µ–ª–∏ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–∏–π</b>",
                                 parse_mode="HTML")
            data = await state.get_data()
            text = (f"<b>–ù–û–í–û–ï –°–û–û–ë–©–ï–ù–ò–ï –ü–û –ó–ê–ö–ê–ó–£ {data.get('order_number')}</b>\n\n"
                    f"<i>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{message.from_user.username} –ø–µ—Ä–µ–¥–∞–ª –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞</i> - <code>{user_input}</code>\n\n"
                    f"ID - {message.from_user.id}")
            await self.bot.send_message(self.chat_id,
                                        text=text,
                                        reply_markup=await order_keyboard_admin_1(),
                                        parse_mode="HTML")
            await state.clear()
        else:
            await message.answer(
                "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7 (XXX) XXX-XX-XX.")
            await state.set_state(TextModel.number_phone)

    @staticmethod
    def validate_phone_number(phone_number):
        cleaned_number = re.sub(r'\D', '', phone_number)

        pattern = r'^7\d{10}$'

        if re.match(pattern, cleaned_number):
            return cleaned_number
        else:
            return False

    async def paid(self, callback: types.CallbackQuery):
        match = re.search(r'–ó–ê–ö–ê–ó #(\w+)', callback.message.text)
        if match:
            order = match.group(1)
            self.db.update_order_status(order,
                                        "üïì –ü–ª–∞—Ç–µ–∂ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è")
            await callback.message.answer(text=f"<i>–ó–ê–ö–ê–ó #{order} –ø–µ—Ä–µ–≤–µ–¥–µ–Ω –≤ —Å—Ç–∞—Ç—É—Å - üïì –ü–ª–∞—Ç–µ–∂ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è</i>\n\n"
                                               f"<b>–û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ –æ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤</b>",
                                          reply_markup=await menu_keyboard(),
                                          parse_mode="HTML")
            await self.bot.send_message(self.chat_id,
                                        text=f"–ó–ê–ö–ê–ó #{order} –ø–µ—Ä–µ–≤–µ–¥–µ–Ω –≤ —Å—Ç–∞—Ç—É—Å - üïì –ü–ª–∞—Ç–µ–∂ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è\n\n"
                                             f"<b>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—á–µ—Ç–∞</b>\n"
                                             f"USERNAME - {callback.from_user.username}"
                                             f"ID - {callback.from_user.id}",
                                        reply_markup=await order_keyboard_admin_1(),
                                        parse_mode="HTML")

    async def cancel_order(self, callback: types.CallbackQuery):
        match = re.search(r'–ó–ê–ö–ê–ó #(\w+)', callback.message.text)
        if match:
            order = match.group(1)
            self.db.update_order_status(order,
                                        "‚õîÔ∏è –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω")
            await callback.message.answer(text=f"<i>–ó–ê–ö–ê–ó #{order} –ø–µ—Ä–µ–≤–µ–¥–µ–Ω –≤ —Å—Ç–∞—Ç—É—Å - ‚õîÔ∏è –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω</i>\n\n",
                                          reply_markup=await menu_keyboard(),
                                          parse_mode="HTML")
            await self.bot.send_message(self.chat_id,
                                        text=f"–ó–ê–ö–ê–ó #{order} –ø–µ—Ä–µ–≤–µ–¥–µ–Ω –≤ —Å—Ç–∞—Ç—É—Å - ‚õîÔ∏è –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω\n\n"
                                             f"USERNAME - {callback.from_user.username}",
                                        parse_mode="HTML")
