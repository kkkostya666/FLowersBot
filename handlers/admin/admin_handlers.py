import os
import re
from functools import wraps, partial

from aiogram import types, F, Bot
from aiogram import Router
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import FSInputFile

import config.token
from keyboards.admin_keyboard.admin_keyboard import admin_keyboard, admin_models_keyboard, \
    admin_models_category_keyboard, admin_models_keyboard_add, requisite_keyboard
from keyboards.admin_keyboard.order_keyboard import add_number_users
from keyboards.main.main_keyboards import menu_keyboard
from keyboards.select_currency_keyboard import set_currency_admin
from state.AddCategory import AddCategory
from state.AddModel import AddModel
from state.AppRequisiteAdmin import AddRequisite


class AdminHandler:
    def __init__(self, db, chat_id, bot_token):
        self.router = Router()
        self.db = db
        self.chat_id = chat_id
        self.bot = Bot(token=bot_token)
        self.register_handlers()

    def register_handlers(self):
        self.router.message(Command("admin"))(self.admin)
        self.router.message.register(self.models, lambda message: message.text == "üëß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±—É–∫–µ—Ç–∞–º–∏")
        self.router.message.register(self.requisite, lambda message: message.text == "üõ†Ô∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º–∏")
        self.router.callback_query(F.data == 'category_model')(self.—Åategory_models)
        self.router.callback_query(F.data == 'good')(self.good)
        self.router.callback_query(F.data == 'cancel_order')(self.cancel_order)
        self.router.callback_query(F.data == 'add_requisite')(self.add_requisite)
        self.router.callback_query(F.data == 'model')(self.model)
        self.router.callback_query(F.data == 'add_category')(self.add_category)
        self.router.callback_query(F.data == 'delete_category')(self.delete_category)
        self.router.callback_query(F.data == 'add_model')(self.add_model)
        self.router.callback_query(F.data == 'add_number_phone')(self.add_number_phone)
        self.router.message(AddCategory.name)(self.add_category_db)
        self.router.message(AddCategory.delete_name)(self.delete_category_name)
        self.router.message(AddModel.name_model)(self.add_name_model)
        self.router.message(AddModel.description)(self.add_description_model)
        self.router.message(AddModel.weight)(
            self.add_price_full_night_model)  # Mapping 'weight' state to final price input
        self.router.message(AddModel.image)(self.add_image_model)
        self.router.callback_query(F.data.startswith('category_'))(self.category_selected)
        self.router.callback_query(F.data.startswith('city_'))(self.city_selected)
        currency = {"RUB_admin": "üá∑üá∫ RUB", "sbp_admin": "üì± SBP", "usdt_admin": "üí≤ USDT", "btc_admin": "üí∂ BTC"}
        for callback_data, currency_name in currency.items():
            self.router.callback_query(F.data == callback_data)(partial(self.update_requisite, currency_name))
        self.router.message(AddRequisite.number_card)(self.add_requisite_db)

    @staticmethod
    def chat_id_required(func):
        @wraps(func)
        async def wrapper(self, obj, *args, **kwargs):
            if isinstance(obj, types.Message):
                chat_id = obj.chat.id
            elif isinstance(obj, types.CallbackQuery):
                chat_id = obj.message.chat.id
            else:
                return
            if chat_id != self.chat_id:
                return

            return await func(self, obj, *args, **kwargs)

        return wrapper

    @staticmethod
    def is_number_required(func):
        @wraps(func)
        async def wrapper(message: types.Message):
            try:
                float(message.text)
                return await func(message, )
            except ValueError:
                await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")
                return

        return wrapper

    @chat_id_required
    async def admin(self, message: types.Message):
        await message.answer(text="<b>üëÆ‚Äç –ê–î–ú–ò–ù –ü–ê–ù–ï–õ–¨</b>\n\n"
                                  "________\n"
                                  f"<i>‚≠êÔ∏è –ö–æ–ª-–≤–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–æ–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</i><code> {self.db.get_users_count()}</code>\n"
                                  f"<i>‚≠êÔ∏è –ö–æ–ª-–≤–æ –±—É–∫–µ—Ç–æ–≤ –≤ –±–æ—Ç–µ:</i> <code>{self.db.get_models_count()}</code>\n"
                                  f"________\n\n"
                                  f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞\n\n"
                                  f"________\n"
                                  f"<i>‚≠êÔ∏è –ö–æ–ª-–≤–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–æ–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</i><code>{self.db.count_users_today()}</code>\n",
                             parse_mode="HTML",
                             reply_markup=await admin_keyboard())

    @chat_id_required
    async def models(self, message: types.Message):
        await message.answer(
            text=f"üìç –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±—É–∫–µ—Ç–∞–º–∏\n"
                 f"________\n"
                 f"<i>‚≠êÔ∏è –ö–æ–ª-–≤–æ –±—É–∫–µ—Ç–æ–≤ –≤ –±–æ—Ç–µ:</i> <code>{self.db.get_models_count()}</code>\n"
                 f"________\n\n"
                 f"–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –º–æ–¥–µ–ª–µ–π\n\n"
                 f"________\n"
                 f"<i>‚≠êÔ∏è –ö–æ–ª-–≤–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤ –±–æ—Ç–µ:</i> <code>{self.db.get_categories_count()}</code>\n",
            parse_mode="HTML",
            reply_markup=await admin_models_keyboard()
        )

    @chat_id_required
    async def —Åategory_models(self, callback: types.CallbackQuery):
        data = self.db.select_all_categories()
        categories_text = "\n".join([f"{category[0]}. {category[1]}" for category in data])
        if not categories_text:
            categories_text = "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç"
        await callback.message.answer(text=f"<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –º–æ–¥–µ–ª–µ–π</b>\n\n"
                                           f"________\n"
                                           f"<i>{categories_text}</i>\n"
                                           f"________\n",
                                      parse_mode="HTML",
                                      reply_markup=await admin_models_category_keyboard())

    @chat_id_required
    async def add_category(self, callback: types.CallbackQuery, state: FSMContext):
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
        await state.set_state(AddCategory.name)
        await callback.message.delete()

    @chat_id_required
    async def add_category_db(self, message: types.Message, state: FSMContext):
        await message.delete()
        await state.update_data(name=message.text)
        await message.answer("‚úîÔ∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è —É—Å–ø–µ—à–Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞")
        self.db.insert_category(message.text)
        await state.clear()

    @chat_id_required
    async def delete_category(self, callback: types.CallbackQuery, state: FSMContext):
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
        await state.set_state(AddCategory.delete_name)

    @chat_id_required
    async def delete_category_name(self, message: types.Message, state: FSMContext):
        if message.text.isdigit():
            category_id = int(message.text)
            await state.update_data(delete_name=category_id)
            self.db.delete_category(category_id=category_id)
            await message.answer("‚úîÔ∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞")
        else:
            await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ).")
            return

        await state.clear()
        await message.delete()

    @chat_id_required
    async def model(self, callback: types.CallbackQuery):
        await callback.message.edit_text(f"üìç –ë—É–∫–µ—Ç—ã\n\n",
                                         reply_markup=await admin_models_keyboard_add())

    @chat_id_required
    async def add_model(self, callback: types.CallbackQuery, state: FSMContext):
        await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±—É–∫–µ—Ç–∞")
        await state.set_state(AddModel.name_model)

    @chat_id_required
    async def add_name_model(self, message: types.Message, state: FSMContext):
        await message.delete()
        await state.update_data(name_model=message.text)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –±—É–∫–µ—Ç–∞")
        await state.set_state(AddModel.description)

    @chat_id_required
    async def add_description_model(self, message: types.Message, state: FSMContext):
        await message.delete()
        await state.update_data(description=message.text)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –±—É–∫–µ—Ç–∞")
        await state.set_state(AddModel.weight)

    @chat_id_required
    async def add_price_full_night_model(self, message: types.Message, state: FSMContext):
        await message.delete()
        await state.update_data(weight=message.text)
        await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ 1 —Ñ–æ—Ç–æ –±—É–∫–µ—Ç–∞")
        await state.set_state(AddModel.image)

    @chat_id_required
    async def add_image_model(self, message: types.Message, state: FSMContext):
        await message.delete()
        if not message.photo:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ.")
            return

        photo = message.photo[-1]
        file_info = await self.bot.get_file(photo.file_id)

        os.makedirs(config.token.PHOTO_DIR, exist_ok=True)

        photo_path = os.path.join(config.token.PHOTO_DIR, f"{message.from_user.id}_{photo.file_id}.jpg")

        await self.bot.download_file(file_info.file_path, photo_path)

        await state.update_data(image=photo_path)

        buttons = [[
            types.InlineKeyboardButton(text=category[1], callback_data=f'category_{category[0]}')
        ] for category in self.db.select_all_categories()]

        await message.answer("–î–æ–±–∞–≤—å—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∫ –±—É–∫–µ—Ç—É",
                             reply_markup=types.InlineKeyboardMarkup(inline_keyboard=buttons))

    @chat_id_required
    async def category_selected(self, callback: types.CallbackQuery, state: FSMContext):
        await callback.message.delete()
        selected_category = callback.data.split('_')[1]

        await state.update_data(category=selected_category)
        cities = {
            "moskow": "–ú–æ—Å–∫–≤–∞",
            "piter": "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥",
            "kzn": "–ö–∞–∑–∞–Ω—å",
            "samara": "–°–∞–º–∞—Ä–∞",
            "yfa": "–£—Ñ–∞",
            "perm": "–ü–µ—Ä–º—å",
            "volgograd": "–í–æ–ª–≥–æ–≥—Ä–∞–¥",
            "novosib": "–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫",
            "nizhiy": "–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥",
            "izhevsk": "–ò–∂–µ–≤—Å–∫",
            "tolyati": "–¢–æ–ª—å—è—Ç—Ç–∏",
            "habarovks": "–•–∞–±–∞—Ä–æ–≤—Å–∫",
            "tymen": "–¢—é–º–µ–Ω—å",
            "chelny": "–ù–∞–±–µ—Ä–µ–∂–Ω—ã–µ –ß–µ–ª–Ω—ã"
        }

        buttons = [
            [types.InlineKeyboardButton(text=city_name, callback_data=f'city_{city_key}')]
            for city_key, city_name in cities.items()
        ]

        await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –±—É–∫–µ—Ç–∞",
                                      reply_markup=types.InlineKeyboardMarkup(inline_keyboard=buttons))

    @chat_id_required
    async def city_selected(self, callback: types.CallbackQuery, state: FSMContext):
        await callback.message.delete()
        selected_key = callback.data.split('_')[1]
        cities = {
            "moskow": "–ú–æ—Å–∫–≤–∞",
            "piter": "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥",
            "kzn": "–ö–∞–∑–∞–Ω—å",
            "samara": "–°–∞–º–∞—Ä–∞",
            "yfa": "–£—Ñ–∞",
            "perm": "–ü–µ—Ä–º—å",
            "volgograd": "–í–æ–ª–≥–æ–≥—Ä–∞–¥",
            "novosib": "–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫",
            "nizhiy": "–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥",
            "izhevsk": "–ò–∂–µ–≤—Å–∫",
            "tolyati": "–¢–æ–ª—å—è—Ç—Ç–∏",
            "habarovks": "–•–∞–±–∞—Ä–æ–≤—Å–∫",
            "tymen": "–¢—é–º–µ–Ω—å",
            "chelny": "–ù–∞–±–µ—Ä–µ–∂–Ω—ã–µ –ß–µ–ª–Ω—ã"
        }

        selected_city = cities.get(selected_key, None)
        data = await state.get_data()

        print(data)
        self.db.add_model(
            name=data['name_model'],
            description=data['description'],
            price=data.get('weight'),
            image=data.get('image'),
            category_id=data.get('category'),
            city=selected_city
        )

        await callback.message.answer("–ë—É–∫–µ—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")

    @chat_id_required
    async def requisite(self, message: types.Message):
        get_requisites = self.db.get_requisites()

        requisites_dict = {
            'üá∑üá∫ RUB': None,
            'üì± SBP': None,
            'üí∂ BTC': None,
            'üí≤ USDT': None,
        }

        for req in get_requisites:
            method_name = req[1]
            address = req[2]
            if method_name in requisites_dict:
                requisites_dict[method_name] = address

        response_text = '<b>üó∫ –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç:</b>\n\n'
        has_requisites = False

        for method, address in requisites_dict.items():
            if address:
                response_text += f'‚Ä¢ <i>{method}</i>: <code>{address}</code>\n'
                has_requisites = True
            else:
                response_text += f'‚Ä¢ <i>{method}</i>: ‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã\n'

        if has_requisites:
            await message.answer(response_text, reply_markup=await requisite_keyboard(),
                                 parse_mode="HTML")
        else:
            await message.answer('‚ùóÔ∏è –†–µ–∫–≤–∏–∑–∏—Ç—ã –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –¥–ª—è –≤—Å–µ—Ö –º–µ—Ç–æ–¥–æ–≤',
                                 reply_markup=await requisite_keyboard())

    async def add_requisite(self, callback: types.CallbackQuery):
        await callback.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ –¥–ª—è –∫–∞–∫–æ–≥–æ –º–µ—Ç–æ–¥–∞ –æ–ø–ª–∞—Ç—ã –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ–∫–≤–∏–∑–∏—Ç—ã',
                                         reply_markup=await set_currency_admin())

    async def update_requisite(self, method, callback: types.CallbackQuery, state: FSMContext):
        print(f"Update requisite called with method: {method}")  # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–∑–æ–≤–∞
        await callback.message.edit_text('–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã/–∫–æ—à–µ–ª—å–∫–∞')
        await state.update_data(method=method)
        await state.set_state(AddRequisite.number_card)

    @chat_id_required
    async def add_requisite_db(self, message: types.Message, state: FSMContext):
        data = await state.get_data()
        print(data)
        method = data.get('method')
        card_number = message.text

        if method and card_number:
            self.db.insert_requisite(method_name=method, address=card_number)
            await message.answer('–†–µ–∫–≤–∏–∑–∏—Ç—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã!', reply_markup=await admin_keyboard())
        else:
            await message.answer('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã.')

        await state.clear()

    @chat_id_required
    async def add_number_phone(self, callback: types.CallbackQuery):
        user_id = re.search(r'ID - (\d+)', callback.message.text)
        number_order_match = re.search(r'–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ - ([\w#]+)',
                                       callback.message.text)

        if user_id:
            user_id = user_id.group(1)
            print(f"–ù–∞–π–¥–µ–Ω–Ω—ã–π ID: {user_id}")
        else:
            print("ID –Ω–µ –Ω–∞–π–¥–µ–Ω.")

        if number_order_match:
            await callback.message.answer(text="–ó–∞–ø—Ä–æ—Å –Ω–∞ –Ω–æ–º–µ—Ä —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
            number_order = number_order_match.group(1)
            text = (f"<b>üßæ –í–û–ü–†–û–° –û–¢ –û–ü–ï–†–ê–¢–û–†–û–í –ü–û–î–î–ï–†–ñ–ö–ò –ü–û –ó–ê–ö–ê–ó–£ {number_order}</b>\n\n"
                    f"<i>–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞</i>\n"
                    f"<i>–û–Ω –±—É–¥–µ—Ç –ø–µ—Ä–µ–¥–∞–Ω –Ω–∞—à–µ–º—É –∫—É—Ä—å–µ—Ä—É –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π —Å–≤—è–∑–∏ —Å –í–∞–º–∏</i>\n\n"
                    f"<b>üî∫ –ú—ã –º–æ–∂–µ–º –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å, —á—Ç–æ –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ –±—É–¥–µ—Ç –Ω–∏–≥–¥–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∏ –ø–µ—Ä–µ–¥–∞–Ω —Ç—Ä–µ—Ç—å–µ–º –ª–∏—Ü–∞–º</b>")
            await self.bot.send_message(user_id,
                                        text=text,
                                        parse_mode="HTML",
                                        reply_markup=await add_number_users())
        else:
            print("–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    async def extract_order_info(self, callback: types.CallbackQuery):
        order_number_match = re.search(r'#(\w+)', callback.message.text)
        id_match = re.search(r'ID - (\d+)', callback.message.text)

        order_number = order_number_match.group(1) if order_number_match else None
        user_id = id_match.group(1) if id_match else None

        if order_number:
            print(f"–ù–∞–π–¥–µ–Ω –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: {order_number}")
        else:
            print("–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.")

        if user_id:
            print(f"–ù–∞–π–¥–µ–Ω ID: {user_id}")
        else:
            print("ID –Ω–µ –Ω–∞–π–¥–µ–Ω.")

        return order_number, user_id

    async def good(self, callback: types.CallbackQuery):
        order_number, user_id = await self.extract_order_info(callback)
        print(user_id)

        if order_number:
            self.db.update_order_status(order_number, "‚òëÔ∏è –£—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—á–µ–Ω–æ")
            text = (f"<i>üßæ –ó–∞–∫–∞–∑ {order_number} –ø–µ—Ä–µ–≤–µ–¥–µ–Ω –≤–æ —Å—Ç–∞—Ç—É—Å - ‚òëÔ∏è –£—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—á–µ–Ω–æ</i>\n"
                    f"<i>–û–∂–∏–¥–∞–π—Ç–µ –∑–≤–æ–Ω–∫–∞ –æ—Ç –Ω–∞—à–µ–≥–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–∏–π</i>")
            print(f"–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ {order_number} –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ '–£—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—á–µ–Ω–æ'.")
            await self.bot.send_message(user_id,
                                        text=text,
                                        parse_mode="HTML",
                                        reply_markup=await menu_keyboard())

            await callback.message.answer(f"<i>–ó–∞–∫–∞–∑ {order_number} –ø–µ—Ä–µ–≤–µ–¥–µ–Ω –≤–æ —Å—Ç–∞—Ç—É—Å - ‚òëÔ∏è –£—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—á–µ–Ω–æ</i>",
                                          parse_mode="HTML")
        else:
            print("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞, –Ω–æ–º–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    async def cancel_order(self, callback: types.CallbackQuery):
        order_number, user_id = await self.extract_order_info(callback)

        if order_number:
            self.db.update_order_status(order_number, "‚úñÔ∏è –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω")
            text = (f"<i>üßæ –ó–∞–∫–∞–∑ {order_number} –ø–µ—Ä–µ–≤–µ–¥–µ–Ω –≤–æ —Å—Ç–∞—Ç—É—Å - ‚úñÔ∏è –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω</i>\n"
                    f"<i>–í–∞—à –ø–ª–∞—Ç–µ–∂ –Ω–µ –±—ã–ª –Ω–∞–π–¥–µ–Ω</i>\n\n"
                    f"<b>–ï—Å–ª–∏ –í—ã –æ–ø–ª–∞—Ç–∏–ª–∏, —Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É</b>")
            await self.bot.send_message(user_id,
                                        text=text,
                                        parse_mode="HTML",
                                        reply_markup=await menu_keyboard())
            print(f"–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ {order_number} –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ '–£—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—á–µ–Ω–æ'.")
            await callback.message.answer(f"<i>–ó–∞–∫–∞–∑ {order_number} –ø–µ—Ä–µ–≤–µ–¥–µ–Ω –≤–æ —Å—Ç–∞—Ç—É—Å - ‚úñÔ∏è –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω</i>",
                                          parse_mode="HTML")
        else:
            print("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞, –Ω–æ–º–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")

