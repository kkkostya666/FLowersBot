from functools import partial

from aiogram import types, F
from aiogram import Router
from aiogram.types import FSInputFile

from keyboards.profile.profile_keyboard import profile_keyboard
from keyboards.select_city_keyboard import set_sity_update
from keyboards.select_currency_keyboard import set_currency


class ProfileHandler:
    def __init__(self, db):
        self.router = Router()
        self.db = db
        self.register_handlers()

    def register_handlers(self):
        self.router.message.register(self.profile, lambda message: message.text == "üë§ –ü–†–û–§–ò–õ–¨")
        self.router.callback_query(F.data == 'change_city')(self.change_city)
        cities = {"moskow_update": "–ú–æ—Å–∫–≤–∞", "piter_update": "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥", "kzn_update": "–ö–∞–∑–∞–Ω—å",
                  "samara_update": "–°–∞–º–∞—Ä–∞", "yfa_update": "–£—Ñ–∞",
                  "perm_update": "–ü–µ—Ä–º—å", "volgograd_update": "–í–æ–ª–≥–æ–≥—Ä–∞–¥", "novosib_update": "–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫",
                  "nizhiy_update": "–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥",
                  "izhevsk_update": "–ò–∂–µ–≤—Å–∫", "tolyati_update": "–¢–æ–ª—å—è—Ç—Ç–∏", "habarovks_update": "–•–∞–±–∞—Ä–æ–≤—Å–∫",
                  "tymen_update": "–¢—é–º–µ–Ω—å",
                  "chelny_update": "–ù–∞–±–µ—Ä–µ–∂–Ω—ã–µ –ß–µ–ª–Ω—ã"}
        for callback_data, city_name in cities.items():
            self.router.callback_query(F.data == callback_data)(partial(self.update_city, city_name))
        self.router.callback_query(F.data == 'change_currency')(self.change_currency)
        self.router.callback_query(F.data == 'my_zakaz')(self.my_zakaz)
        currency = {"RUB": "üá∑üá∫ RUB", "sbp": "üì± SBP", "usdt": "üí≤ USDT",
                    "btc": "üí∂ BTC"}
        for callback_data, currency_name in currency.items():
            self.router.callback_query(F.data == callback_data)(partial(self.update_currency, currency_name))

    async def profile(self, message: types.Message):
        data = self.db.get_user_by_id(message.from_user.id)
        count_model = self.db.count_models_with_city(data[8])
        count_order = self.db.count_orders_by_user_id(data[0])
        print(count_order)
        current_currency = data[9] if data[9] is not None else "–ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ"
        profile = (f"üë®‚Äçüíª <b>USERNAME:</b> {message.from_user.username}\n\n"
                   f"____\n\n"
                   f"<i>ü™ù ID: {data[0]}</i>\n"
                   f"<i>‚≠êÔ∏è –†–µ–π—Ç–∏–Ω–≥: 0</i>\n"
                   f"<i>‚ö°Ô∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤: {count_order}</i>\n"
                   f"<i>üèô –¢–µ–∫—É—â–∏–π –≥–æ—Ä–æ–¥: {data[8]}</i>\n"
                   f"<i>üí∞ –¢–µ–∫—É—â–∞—è –≤–∞–ª—é—Ç–∞: {current_currency}</i>\n\n"
                   f"____\n\n"
                   f"‚ùóÔ∏è <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±—É–∫–µ—Ç–æ–≤ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –≥–æ—Ä–æ–¥–µ: {count_model}</b>")
        await message.answer(
            text=profile,
            parse_mode="HTML",
            reply_markup=await profile_keyboard())

    @staticmethod
    async def change_city(callback: types.CallbackQuery):
        await callback.message.delete()
        await callback.message.answer(
            text="–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥",
            parse_mode="HTML",
            reply_markup=await set_sity_update())
        await callback.answer()

    async def update_city(self, city, callback_query: types.CallbackQuery):
        await callback_query.message.delete()
        self.db.update_user_city(callback_query.from_user.id, city)
        await callback_query.message.answer(f"‚òëÔ∏è <i>–í–∞—à –≥–æ—Ä–æ–¥ –±—ã–ª –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ {city}</i>", parse_mode="HTML")
        data = self.db.get_user_by_id(callback_query.from_user.id)
        count_model = self.db.count_models_with_city(data[8])
        count_order = self.db.count_orders_by_user_id(data[0])
        print(data[8], count_model)
        current_currency = data[9] if data[9] is not None else "–ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ"
        profile = (f"üë®‚Äçüíª <b>USERNAME:</b> {callback_query.from_user.username}\n\n"
                   f"____\n\n"
                   f"<i>ü™ù ID: {data[0]}</i>\n"
                   f"<i>‚≠êÔ∏è –†–µ–π—Ç–∏–Ω–≥: 0</i>\n"
                   f"<i>‚ö°Ô∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤: {count_order}</i>\n"
                   f"<i>üèô –¢–µ–∫—É—â–∏–π –≥–æ—Ä–æ–¥: {data[8]}</i>\n"
                   f"<i>üí∞ –¢–µ–∫—É—â–∞—è –≤–∞–ª—é—Ç–∞: {current_currency}</i>\n\n"
                   f"____\n\n"
                   f"‚ùóÔ∏è <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±—É–∫–µ—Ç–æ–≤ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –≥–æ—Ä–æ–¥–µ: {count_model}</b>")
        await callback_query.message.answer(
            text=profile,
            parse_mode="HTML",
            reply_markup=await profile_keyboard())

    @staticmethod
    async def change_currency(callback: types.CallbackQuery):
        await callback.message.delete()
        await callback.message.answer(
            text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ—Å—Ç—É–ø–Ω—É—é –≤–∞–ª—é—Ç—É",
            parse_mode="HTML",
            reply_markup=await set_currency())
        await callback.answer()

    async def update_currency(self, currency, callback_query: types.CallbackQuery):
        await callback_query.message.delete()
        self.db.update_user_currency(callback_query.from_user.id, currency)
        await callback_query.message.answer(f"‚òëÔ∏è <i>–í–∞—à–∞ –≤–∞–ª—é—Ç–∞ –±—ã–ª–∞ –∏–∑–º–µ–Ω—ë–Ω–∞ –Ω–∞ {currency}</i>", parse_mode="HTML", )
        data = self.db.get_user_by_id(callback_query.from_user.id)
        count_model = self.db.count_models_with_city(data[8])
        count_order = self.db.count_orders_by_user_id(data[0])
        print(data[8], count_model)
        current_currency = data[9] if data[9] is not None else "–ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ"
        profile = (f"üë®‚Äçüíª <b>USERNAME:</b> {callback_query.from_user.username}\n\n"
                   f"____\n\n"
                   f"<i>ü™ù ID: {data[0]}</i>\n"
                   f"<i>‚≠êÔ∏è –†–µ–π—Ç–∏–Ω–≥: 0</i>\n"
                   f"<i>‚ö°Ô∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤: {count_order}</i>\n"
                   f"<i>üèô –¢–µ–∫—É—â–∏–π –≥–æ—Ä–æ–¥: {data[8]}</i>\n"
                   f"<i>üí∞ –¢–µ–∫—É—â–∞—è –≤–∞–ª—é—Ç–∞: {current_currency}</i>\n\n"
                   f"____\n\n"
                   f"‚ùóÔ∏è <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±—É–∫–µ—Ç–æ–≤ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –≥–æ—Ä–æ–¥–µ: {count_model}</b>")
        await callback_query.message.answer(
            text=profile,
            parse_mode="HTML",
            reply_markup=await profile_keyboard())

    async def my_zakaz(self, callback: types.CallbackQuery):
        await callback.message.delete()

        user_id = self.db.get_user_by_id(callback.from_user.id)[0]
        orders = self.db.get_orders_by_user_id(user_id)

        if not orders:
            await callback.message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤.")
            return

        order_texts = []
        for order in orders:
            order_texts.append(
                f"üßæ <b>–ó–ê–ö–ê–ó #{order[1]}</b>\n"
                f"<i>–ú–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã:</i> <code>{order[7] if order[7] else '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}</code>\n"
                f"<i>–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ:</i> <code>{order[4]}</code>\n"
                f"<i>–°—Ç–∞—Ç—É—Å:</i> <code>{order[5]}</code>\n"
                f"<i>–í—Ä–µ–º—è:</i> <code>{order[7]}</code>\n"
                f"-------\n"
            )
        await callback.message.answer(
            text="\n".join(order_texts),
            reply_markup=await profile_keyboard(),
            parse_mode="HTML",
        )
