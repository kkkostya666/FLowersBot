import datetime
from functools import partial

from aiogram.types import InputFile, FSInputFile

from keyboards.select_city_keyboard import set_sity
from keyboards.autorizate.autorizate_keyboard import autorizate_keyboard, only_register, only_autorizate, \
    reply_keyboard
from aiogram import types, F, Bot
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from text.start.start import start_message
from aiogram import Router


class StartHandler:
    def __init__(self, db, chat_id, bot_token):
        self.bot = Bot(token=bot_token)
        self.router = Router()
        self.db = db
        self.register_handlers()
        self.chat_id = chat_id

    def register_handlers(self):
        self.router.message(CommandStart())(self.start)
        cities = {"moskow": "–ú–æ—Å–∫–≤–∞", "piter": "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥", "kzn": "–ö–∞–∑–∞–Ω—å", "samara": "–°–∞–º–∞—Ä–∞", "yfa": "–£—Ñ–∞",
                  "perm": "–ü–µ—Ä–º—å", "volgograd": "–í–æ–ª–≥–æ–≥—Ä–∞–¥", "novosib": "–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫", "nizhiy": "–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥",
                  "izhevsk": "–ò–∂–µ–≤—Å–∫", "tolyati": "–¢–æ–ª—å—è—Ç—Ç–∏", "habarovks": "–•–∞–±–∞—Ä–æ–≤—Å–∫", "tymen": "–¢—é–º–µ–Ω—å",
                  "chelny": "–ù–∞–±–µ—Ä–µ–∂–Ω—ã–µ –ß–µ–ª–Ω—ã"}
        self.router.callback_query(F.data == 'register')(self.register)
        for callback_data, city_name in cities.items():
            self.router.callback_query(F.data == callback_data)(partial(self.process_city, city_name))

    async def start(self, message: types.Message, state: FSMContext):
        await state.clear()
        if self.db.user_exists(message.from_user.id):
            await message.answer(text=start_message,
                                 parse_mode="HTML",
                                 reply_markup=await reply_keyboard())
        else:
            await message.answer("<i>‚ùó –í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è</i>",
                                 reply_markup=await only_register(),
                                 parse_mode="HTML")

    async def register(self, callback_query: types.CallbackQuery):
        if not self.db.user_exists(callback_query.from_user.id):
            await callback_query.message.answer("<b>–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ üåá</b>",
                                                parse_mode="HTML",
                                                reply_markup=await set_sity())
        else:
            await callback_query.message.answer("<b>‚úñÔ∏è –í–ê–® –ê–ö–ö–ê–£–ù–¢ –ó–ê–†–ï–ì–ò–°–¢–†–ò–†–û–í–ê–ù</b>\n\n‚ÄºÔ∏è –ê–≤—Ç–æ—Ä–∏–∑–∏—Ä—É–π—Ç–µ—Å—å",
                                                parse_mode="HTML",
                                                reply_markup=await only_autorizate())
        await callback_query.message.delete()

    async def process_city(self, city, callback_query: types.CallbackQuery):
        await callback_query.message.delete()
        self.db.add_user(callback_query.from_user, city, datetime.datetime.now())
        text = (f"<b>üí∞ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</b>\n\n"
                f"____\n"
                f"USERNAME - @{callback_query.from_user.username}\n"
                f"ID - <code>{callback_query.from_user.id}</code>\n"
                f"–ò–º—è - <code>{callback_query.from_user.first_name}</code>\n"
                f"–§–∞–º–∏–ª–∏—è - <code>{callback_query.from_user.last_name}</code>\n"
                f"–Ø–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - <code>{callback_query.from_user.language_code}</code>\n"
                f"–ì–æ—Ä–æ–¥ - <code>{city}</code>\n"
                f"____")

        await self.bot.send_message(
            chat_id=self.chat_id,
            text=text,
            parse_mode="HTML",
        )

        await callback_query.message.answer(text=start_message,
                                            parse_mode="HTML",
                                            reply_markup=await reply_keyboard())
