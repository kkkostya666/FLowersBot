from datetime import datetime
import re

from aiogram import types, F, Bot
from aiogram import Router
from aiogram.fsm.context import FSMContext

from keyboards.support_keyboard.support_keyboard import support_keyboard
from state import SupportState


class SupportHandler:
    def __init__(self, db, chat_id, bot_token):
        self.bot = Bot(token=bot_token)
        self.db = db
        self.router = Router()
        self.register_handlers()
        self.chat_id = chat_id

    def register_handlers(self):
        self.router.callback_query(F.data == 'support')(self.support)
        self.router.callback_query(F.data == 'support_send')(self.support_send)
        self.router.message.register(self.support_text, lambda message: message.text == "üõ†Ô∏è –¢–ï–•–ù–ò–ß–ï–°–ö–ê–Ø –ü–û–î–î–ï–†–ñ–ö–ê")
        self.router.message(SupportState.TextModel.text)(self.send_message)
        self.router.message(SupportState.TextModel.text_support)(self.send_message_support)

    @staticmethod
    async def support(callback: types.CallbackQuery, state: FSMContext):
        await callback.message.answer(text=f"<b>–ù–∞–ø–∏—à–∏—Ç–µ –í–∞—à –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –ø–æ–∂–µ–ª–∞–Ω–∏–µ</b>", parse_mode="HTML")
        await state.set_state(SupportState.TextModel.text)

    @staticmethod
    async def support_text(message: types.Message, state: FSMContext):
        await message.answer(text=f"<b>–ù–∞–ø–∏—à–∏—Ç–µ –í–∞—à –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –ø–æ–∂–µ–ª–∞–Ω–∏–µ</b>", parse_mode="HTML")
        await state.set_state(SupportState.TextModel.text)

    async def send_message(self, message: types.Message, state: FSMContext):
        self.db.add_support_request(user_id=message.from_user.id, message=message.text)
        data = self.db.get_latest_support_request(user_id=message.from_user.id)
        text = (f"<b>üë® –ù–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{message.from_user.username}</b>\n"
                f"<i>ID –ó–∞—è–≤–∫–∏:</i> {data[0]}\n"
                f"<i>–°—Ç–∞—Ç—É—Å:</i> {data[5]}\n"
                f"<i>–î–∞—Ç–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è:</i> {data[3]}\n"
                f"________\n\n"
                f"<i>{message.text}</i>\n\n"
                f"________\n\n"
                f"‚ùóÔ∏è –î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–π—Ç–∏ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
        await self.bot.send_message(chat_id=self.chat_id,
                                    text=text,
                                    reply_markup=await support_keyboard(),
                                    parse_mode="HTML")
        await message.answer(
            text=(f"<i>ID –ó–∞—è–≤–∫–∏:</i> {data[0]}\n\n"
                  f"________\n"
                  f"<i>–°—Ç–∞—Ç—É—Å:</i> {data[5]}\n"
                  f"<i>–î–∞—Ç–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è:</i> {data[3]}\n"
                  f"________\n\n"
                  "<i>–û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç –æ—Ç –Ω–∞—à–∏—Ö –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤</i>\n"
                  "<i>–í —Å—Ä–µ–¥–Ω–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç 15 –º–∏–Ω—É—Ç</i>"),
            parse_mode="HTML"
        )
        await message.delete()
        await state.clear()

    @staticmethod
    async def support_send(callback: types.CallbackQuery, state: FSMContext):
        await callback.message.answer(text=f"<b>–ù–∞–ø–∏—à–∏—Ç–µ –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é</b>", parse_mode="HTML")
        await state.set_state(SupportState.TextModel.text_support)
        await callback.message.delete()

    async def send_message_support(self, message: types.Message, state: FSMContext):
        data_id = self.db.get_latest_support_request(user_id=message.from_user.id)
        print(data_id[0])
        self.db.update_support_request_response(support_id=data_id[0],
                                                response=message.text,
                                                status="‚òëÔ∏è –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω")
        data = self.db.get_latest_support_request(user_id=message.from_user.id)
        datatime = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        text = (f"<b>‚òëÔ∏è –ü—Ä–∏—à–µ–ª –æ—Ç–≤–µ—Ç –æ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ –ø–æ–¥–¥–µ—Ä–∂–∫–∏</b>\n\n"
                f"<i>ID –ó–∞—è–≤–∫–∏:</i> {data[0]}\n\n"
                f"<i>–°—Ç–∞—Ç—É—Å:</i> {data[5]}\n"
                f"<i>–î–∞—Ç–∞ –æ—Ç–≤–µ—Ç–∞:</i> {datatime}\n"
                f"________\n"
                f"<i>{data[4]}</i>\n"
                f"________\n\n"
                )
        await self.bot.send_message(chat_id=data[1],
                                    text=text,
                                    parse_mode="HTML")
        await message.answer(text="<b>–í–∞—à –æ—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–≤–ª–µ–Ω</b>\n\n",
                             parse_mode="HTML")
        await message.delete()
        await state.clear()
